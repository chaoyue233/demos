# 策略模式
    策略模式定义了算法族，分别封装起来，让他们之间可以相互替换，此模式让算法的变化独立于使用算法的客户
    以鸭子模拟器举例 将飞行行为和鸣叫行为作为基类的接口，表示鸭子具有飞行和鸣叫的行为，通过调用接口的飞行和鸣叫方法切换行为方式
    子类通过构造器构造不同的飞行行为和鸣叫行为实现，还可以在运行时通过切换接口的实现改变行为方式
    详见 strategy 包下的MiniDuckSimulator例子

# 观察者模式
    观察者主要包括主题和观察者两个角色
    主题接口需要有观察者注册 观察者移除 观察者通知 3个方法 可以使用List<Object> 保存所订阅该主题的观察者，每当主题要新的变更，
    可以循环自己保存的观察者列表调用其通知方法达到广播的效果。
    观察者需要包含主题和消息通知方法 可以通过主题的观察者移除方法移除自己。
    java.util.Observer为JAVA内置的观察者模式 主题类继承Observable类 观察者实现 Observer 接口的 update() 方法
    详见 observer 包下的WeatherStation

# 装饰者模式
    可以动态的将责任附加到对象上 装饰着和被装饰着继承自同一个超类，装饰着可以作为被装饰者的替代 装饰着通过重写并调用被装饰者的方法来达到替代被装饰者的效果
    拿咖啡做例子 所有的类都继承自Beverage 使用调料类对饮料类进行装饰，重写父类的cost方法，每次加上自己的价格 构造器传入父类对象，实际使用时传入需要装饰的对象
    java中使用装饰着模式的为java的I/O类
    详见 decorate 包下的 StarbucksCoffee (A B Test 类表明了重写方法的效果)

# 工厂模式
    简单工厂 就是使用一个类根据不同条件来创建所需要的具体类型，简单工厂并不是一种模式，而是一种编程习惯
    工厂方法模式 定义了一个创建对象的接口 由子类决定要实例化的类是哪一个，工厂方法让类吧实例化推迟到子类
    抽象工厂模式 提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类
    工厂方法和抽象工厂之间的异同
    工厂方法使用的是继承 不同的子类工厂继承自同一个父类工厂，并覆盖父类工厂的方法，实现自己差异化的方法
    抽象工厂使用的是组合 接口定义具体的创建方法 缺点是新增需要修改接口，所有子类都会受影响
    详见 factory 包下的相关例子

# 单例模式
    创建单个实例 注意多线程
    详见 singleton 包下的相关例子

# 命令模式
    讲请求封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象
    主要包含Command<interface> 请求对象 Client 创建者 Receiver 接收者 Invoker 执行者
    详见 command 包下相关例子

# 适配器模式
    将一个类接口包装为另外一个接口 期间差异化处理由适配器类实现
    详见 adapter包下相关例子

# 外观模式
    提供了一个统一的接口，来访问子系统的一群接口 类似于一键xxx

# 模板方法模式
    在一个方法中定义算法的骨架，将一些步骤延迟到子类中，使得子类可以再不改变算法结构的情况下，重新定义算法中的某些步骤
    以冲饮料为例 CaffeineBeverage 定义了冲饮料的模板方法 Coffee 和 Tea继承自该方法，子类可以覆盖流程中方法的具体实现，但不能改变方法的执行顺序
    详见 template 包下的相关例子

# 迭代器模式
    提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示，将游走的任务放在迭代器上，简化聚合接口的实现
    提供方法 hasNext() next() remove() 来进行迭代处理
    详见 iterator 包下的相关例子

# 组合模式
    使用树形结构来表现 整体/部分 层次结构 组合内所有的对象都必须实现相同的接口

# 状态模式
    将状态封装成独立的类，并将动作委托到代表当前对象
    以扭蛋机为例，每个状态都定义了发生某个动作导致的状态变更
    详见 status 包下相关例子

# 代理模式
    emmmm 不知道说什么